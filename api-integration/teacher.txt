================================================================================================================
end points about classes i.e creating class, deleting classes, getting all the classes, geting a single class
================================================================================================================
====> teacher creates class room
route: /api/class
method:POST
payload: {
    subject: string,
    className:string,
    grade:string enum eg: Grade1, Grade2 and so on,
    duration:string,
    classStarts: string,
    classEnds:string,
    schedules:array of days eg:[Monday, Sunday],
    price:number,
    classBanner:string,
    publicClass:boolean,
    maxCapacity:number,
    classTime:String
}
comment: create an extra input for capacity in the frontend, and also time for class 
correction: add time for class in schema

====> delete or remove class
route: /api/class
method: DELETE
paylood:{
    id:string
}
comment: the id above means the class id you want to delete

====> get all the class
route: /api/class
method: GET
comment: once this route it hit, all class created by the teacher that is logged in will be returned

====> get only a single class
route: /api/class/specific/:id
method: GET
comment: this is a dynamic route, the :id here is the classId, once you get a single class, there is field called studentIDS(this is an array containing id of the student), you can use parallel query to get each student from this id

====> get a single student
route: /api/about-student/:id
method: GET
comment: console the information you retured from this route, and use them appropriately where needed
================================================================================================================
endpoint for test and resources i.e teacher creating resources and test
================================================================================================================

=====>create a resources
route: /api/manage-resources
method: POST
payload: {
    subject:string,
    title:string,
    sourceLink:string,
}
comment: extra input should be created for subject and title

=====>delete a resources
route: /api/manage-resources
method: DELETE
payload:{
    id:string
}
comment: the id in the payload is the resources you want to delete

=====> get only one particular resources
route: /api/manage-resources/:id
method: GET
comment: this is a dynamic route, the :id is the id of the resources you want to get

=====> create a test
route:/api/exam-by-teachers
method: POST
payload:{
    title:string,
    duration: string,
    grade:string enum eg: Grade1, Grade2 and so on,
    test: [{"question":string, "answer":string, "options":[string, string, string, string]},]
    }
comment: the test in the payload contains an array of object which represent each question, then the options is the array of obtions for student to pick

=====> delete a test
route: /api/exam-by-teachers
method:DELETE
payload:{
    id:string
}
comment: the id of the exam you want to delete

=====> get all the test a teacher student
route: /api/exam-by-teachers
method:GET
comment: this route with the method gets all the exam by the teacher

=====> get only one test
route: /api/exam-by-teachers/:id
method:GET
comment: this get only a particular exam the :id is the id of the exam you wish to get

================================================================================================================
endpoint for one on one sections
================================================================================================================

=====> create section profile (under one on one page)
route: api/one-on-one-section
method:POST
payload:{
    aboutTutor:string,
    subjects: array of strings, which are in capital letters, eg:["CHEMISTRY", "ENGLISH"],
    grade:array of string which the first latter is uppercase["Grade1", "Grade2"],
    preference: array of string enum which should be camel case eg:["homeWorkSupport", "oneOnOneSection", "groupWork","openToJobs"],
    minPrice: number,
    maxPrice: number
}
commnet: the edit session profile should be changed to create session profile, then using conditional statement, we can add edit session profile only when you have created session profile before

=====> get all  session students
route: api/one-on-one-section
method:GET
comment: this return the one on one profile, together with an extra field appliedSession which is an arrray of student that have applied for one on one session with the teacher

=====> update session profile
route: api/one-on-one-section
method: UPDATE
payload:{
    //it can receive any payload format like the create session profile above
}

=====> get details of a particular session
route: api/one-on-one-section/session/:id
method: GET
comment: this gets the basic informations needed, from there you can get more information from the neccessay ids

=====> set one on one section exam
route:/api/exam-for-students
method: POST
payload:{
     appliedSectionId:string,
    examId:string,
}
comment: there will be a dialog box in which the teacher can get list of the exams he set already and add it to the one on one session
the appliedSectionId is the one on one session id for a particular student and examId is the id of the selected exam

================================================================================================================
endpoint for teachers to submit kyc
================================================================================================================

=====> submit kyc by teachers
route:/api/kyc
method: POST
payload:{
    docType:string,
    docImg:string,
    verifiedImg:string
}
comment: teachers will use this endpoint to create or submit their kyc, at submission the kyc will be pendind waiting for approval or rejection from the admin




NEW ENDPOINTS
date: 9/20/2024 
================================================================================================================
endpoint to get all the exam by teacher
================================================================================================================
====> teacher getting all their exam
route:/api/exam-by-teachers
method: GET
comment: this enpoint will return all the exams a teacher set before, this is so you can be able to get exam for a particular
class or for a one on one section.

================================================================================================================
endpoint to get all the resources by teacher
================================================================================================================
=====> teacher getting all their resources
route: /api/manage-resources
method: GET
comment: this enpoint is for teachers to get all their resources, so that they can set it for a particular class or one on one section

================================================================================================================
endpoint for a teacher to set exam for the class
================================================================================================================
====> teacher setting exam for a class
route: /api/class/exams
method: POST
payload:{
    classId: String,
    examId:String
}
comment: while creating exams for a class, we just need the classId which you want to add the exam to and the examId, every other things will be handled in the backend

================================================================================================================
endpoint for a teacher to add a resouces for a class
================================================================================================================
====> teacher adding resources to a particular class
route: /api/class/resources
method: POST
payload:{
    classId: String,
    resourceId:String,
}
comment:passing the classId and the resourceId through the above route will handle creating a resource for the class



NEW ENDPOINT: DATE, DECEMBER 1 2024
================================================================================================================
endpoint for a teacher to create an announcement
================================================================================================================
====> teacher create an announcement
router: /api/class/announcement
method: POST
payload:{
    desc:string,
    title:string,
    classId:string
}

================================================================================================================
endpoint for a teacher to delete an announcement
================================================================================================================
====> teacher deletes an announcement
route: /api/class/announcement
method: DELETE
payload:{
    id:string
}
comment: id is the id of the announcement you want to delete

================================================================================================================
endpoint for a teacher to update an announcement
================================================================================================================
====> teacher update an announcement
route: /api/class/announcement
payload:{
    id:string,
    desc:string,
    title: string
}

NEW ENDPOINTS
date: 13/01/2025
================================================================================================================
endpoint for teacher to add resources for one on one section
================================================================================================================
====> teacher add resources in one on one section.
route:/api/one-on-one-section/resources
payload:{
    resourceId: string,
    sectionId:string
}
method: POST
comment: resourceId is the id of the resources you want to add, while sectionId is the id of the one on one section.

================================================================================================================
endpoint for teacher to delete resources for one on one section
================================================================================================================
====> teacher delete resources in one on one section.
route:/api/one-on-one-section/resources
payload:{
    resourceId:string,
    sectionId:string,
}
method:DELETE

================================================================================================================
endpoint for teacher to add exam for one on one section
================================================================================================================
====> teacher set exam in one on one section
route: /api/exam-for-students
payload:{
    examId:string,
    appliedSectionId:string
}
method: POST
comment: examId is the id of the exam you want to add to one on one section, and appliedSectionId is the id of the one on one section.

NEW ENDPOINTS
date: 22/01/2025
================================================================================================================
endpoint for teacher to delete exam for one on one section
================================================================================================================
=====> teacher delete one on one exam
route: /api/exam-for-students
payload:{
    examId:string
}
method:DELETE

================================================================================================================
endpoint for getting all the resources attached to one on one section
================================================================================================================
=====> both teacher and student can see the one on one section resources
route: /api/get-single-resources/id
method:GET
comment: you will make a paraquery to this endpoint, the params id in the url is id of the resouces you want to fetch.

================================================================================================================
endpoint for getting single special request 
================================================================================================================
route:/api/teacher-special-request/single-special-request/id
method:GET
comment: id in the url is the single special request id
