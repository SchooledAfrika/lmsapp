// continue with all the many to many relationships, teachersSubject and students
// students and schools
// students and teachers
// teachers and schools

// TODO: check if normal prisma many to many will be able to work, if it does not work,
// we may default to creating array and pushing the necessary id to it
// then mapping it to and pushing it to new set of array that will be used instead

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// creating the teachers model
model Teacher {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  password             String?
  email                String               @unique
  teachingRole         TeachersRole         @default(EXTERNAL) //weather the teacher is schooledAfrika teacher or as an external teacher
  subscriped           Boolean? //shows true if the subscription have not expired
  subscriptionDuration BigInt? //stores date base on the subscription the teacher made
  acceptanceVideo      String? // here we store the string for the video the teacher made for us to accept them
  nationalIdFront      String? // front of the national id card the teacher submited
  nationalIdBack       String? // back of the national id card the teacher submited
  profilePhoto         String? // for setting profile picture
  detail               String? // here the teacher submit brief description about them self not more than 300 words
  TeachersArticle      TeachersArticle[]
  rating               Float?
  TeachersSubject      TeachersSubject[]
  phoneNo              String?
  Session              Session[]
  pricing              Int?
  role                 Role
  gender               Gender?
  address              String?
  resume               String?
  language             String?
  // remember to change this subject later to arrays of subjects
  subject              String?
  grade                String?
  sessionPrice         String?
  homeWorkPrice        String?
  bankName             String?
  accountNo            String?
  accountName          String?
  preference           String[]
  details              String?
  // creating the many to many relationship between student and teacher
  studentIDs           String[]             @db.ObjectId
  students             Student[]            @relation(fields: [studentIDs], references: [id])
  Classes              Classes[]
  SchoolTeachers       SchoolTeacher[]
  SchoolClassTeacher   SchoolClassTeacher[]
  VacancyTeacher       VacancyTeacher[]
  OneOnOneSection      OneOnOneSection?
  Exams                Exams[]
  CompletedProfile     Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now())
  kyc                  Kyc?
  Ratting              Ratting[]
  reviewers            String[]             @db.ObjectId
}

model Kyc {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  docType     String
  docImg      String
  verifiedImg String
  status      KycStatus @default(PENDING)
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  teacherId   String    @unique @db.ObjectId
}

// creating the student model
model Student {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String               @unique
  password           String?
  profilePhoto       String?
  phoneNo            String?
  gender             Gender?
  address            String?
  grade              Grade?
  details            String?
  disable            Boolean?
  // creating the many to many relationship between student and teacher
  // becasue the student can have many teachers
  teacherIDs         String[]             @db.ObjectId
  teachers           Teacher[]            @relation(fields: [teacherIDs], references: [id])
  // creating a many to many relationship between classes and students
  // a student can decide to join one or many classes
  classIDs           String[]             @db.ObjectId
  classes            Classes[]            @relation(fields: [classIDs], references: [id])
  role               Role
  SchoolStudent      SchoolStudent[]
  SchoolClassStudent SchoolClassStudent[]
  AppliedSection     AppliedSection[]
  CompletedProfile   Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  Ratting            Ratting[]
  AdminSectionView   AdminSectionView[]
}

// creating the school model
model School {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String          @unique
  banner           String?
  schAddress       String?
  ownerName        String?
  phoneNo          String?
  homeAddress      String?
  schoolLogo       String?
  briefDescription String?
  password         String?
  profilePhoto     String?
  SchoolTeachers   SchoolTeacher[]
  SchoolStudent    SchoolStudent[]
  // vacancies created by the school, it may be one or many
  Vacancy          Vacancy[]
  role             Role
  SchoolClass      SchoolClass[]
  CompletedProfile Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
}

// creating the model for parents
model Parents {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String   @unique
  password         String?
  profilePhoto     String?
  role             Role
  gender           Gender?
  wards            String[] @db.ObjectId
  phoneNo          String?
  address          String?
  CompletedProfile Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
}

// here we created the model where teachers can upload article
// this article can be any media ranging from pdf, common link, and videos
// the link to the pdf or article is stored here
// this article id can be pushed into the array inclasses so that students can actually access it
model TeachersArticle {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  subject    Subjects
  title      String
  sourceLink String
  type       ResourceType
  teacher    Teacher      @relation(fields: [teacherId], references: [id])
  teacherId  String       @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
}

// this model is to show connections between teachers and rattings
model Ratting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String   @db.ObjectId
  comment   String
  rateValue Int
  ratter    Student  @relation(fields: [studentId], references: [id])
  studentId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// once a teacher is registered
// there should be a place to register the courses he offer
// those courses is saved down here 
// Single teacher can have many subjects
// this subjects also contains the list of student offering it
// there is many to many relationship between students and the teachersSubject
model TeachersSubject {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  subject   Subjects //Subjects enum are defined below
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  teacherId String    @db.ObjectId
  Session   Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

// below is the session model, each time a teacher has class
// there should be a session created in respect of the class
// here, we will save the generated id for the online meeting
// and also, the teacher id is stored in this session
// we should also have many sessions for a particular subject, conducted by a particular teacher
// and there should be list of students that is expected to be in this session
model Session {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  teacher           Teacher         @relation(fields: [teacherId], references: [id])
  teacherId         String          @db.ObjectId
  videoLink         String
  subject           String
  topic             String
  sectionSubject    TeachersSubject @relation(fields: [teachersSubjectId], references: [id])
  teachersSubjectId String          @db.ObjectId
  listOfStudent     String[] //this will contain the list of all the students for this particular section
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
}

// below is the model for classes
// teachers can create their one or many classes i.e there will be one to many relationship between
// teachers and classes
// student will have many to many relationship with classes
// since students can have many classes and classes can have many students
model Classes {
  id                         String                       @id @default(auto()) @map("_id") @db.ObjectId
  subject                    Subjects
  className                  String
  grade                      Grade
  duration                   String
  classStarts                DateTime
  classEnds                  DateTime
  schedules                  ClassDay[]
  price                      Float
  classBanner                String
  rating                     Float?
  publicClass                Boolean                      @default(true)
  classTime                  String?
  // here, there is one to many relationship between classes and teacher
  // a teacher can have many classes
  teacher                    Teacher                      @relation(fields: [teacherId], references: [id])
  teacherId                  String                       @db.ObjectId
  // there will be many to many relationship between classes and students
  // classes can have many students
  studentIDs                 String[]                     @db.ObjectId
  students                   Student[]                    @relation(fields: [studentIDs], references: [id])
  maxCapacity                Float
  currentCapacity            Float                        @default(0)
  // this will contain the arrays of the resources the teacher ass
  resourcesIds               String[]                     @default([])
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @default(now())
  ClassExams                 ClassExams[]
  StudentClassExam           StudentClassExam[]
  AnnouncementByTeacherClass AnnouncementByTeacherClass[]

  @@index([teacherId], name: "teachers_class_index")
}

// below is the model for one on one section
// this is created by a teacher once and can be edited if need arises
// there will be one to one relationship between the Teacher and this model
model OneOnOneSection {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  teacher          Teacher            @relation(fields: [teacherId], references: [id])
  teacherId        String             @unique @db.ObjectId
  aboutTutor       String
  subjects         Subjects[]         @default([ENGLISH, MATHEMATICS])
  grade            Grade[]
  preference       String[]           @default([])
  // this will contain the list of connection between the student that 
  // applied for one on one sections
  AppliedSection   AppliedSection[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  AdminSectionView AdminSectionView[]
}

// model below will contain information about students that applied for one on one sections
// there will be one to many relationship between this model and oneoneoneSection model
// there will also be one to many relationship between students model and this model
model AppliedSection {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  sectionOwner      OneOnOneSection @relation(fields: [oneOnOneSectionId], references: [id])
  oneOnOneSectionId String          @db.ObjectId
  student           Student         @relation(fields: [studentId], references: [id])
  studentId         String          @db.ObjectId
  subject           Subjects
  grade             Grade
  type              PreferSection
  duration          DateTime
  classStart        DateTime
  // this will contain the id of the resources that the teacher will push here
  resources         String[]        @default([])
  StudentExam       StudentExam[]

  @@index([oneOnOneSectionId, studentId], name: "applied_section")
}

// the model below will be displayed in the admin dashbaord.
// when a student finsih paying for one-on-one-section the information will created containing. 
// most information about the student and the section profile of the teacher.
model AdminSectionView {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  // the student info that applied for section
  student           Student         @relation(fields: [studentId], references: [id])
  studentId         String          @db.ObjectId
  // the section profile of the teacher that was selected
  sectionInfo       OneOnOneSection @relation(fields: [oneOnOneSectionId], references: [id])
  oneOnOneSectionId String          @db.ObjectId
  merged            Boolean         @default(false)
  amt               Int
  // for show section type, example homeworksupport and private section
  sectionType       String
  hoursperday       Int
  // duration like monthly or yearly
  duration          String
  subject           String
  curriculum        String
  specialNeed       String?
  learningGoal      String?
  learningDays      String[]
  // time to start or proposed time
  startTime         DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
}

// below is the model for get in touch
// any one can send a message, irrespective if you are registered or not
// only school afrika portal or admin dashboard should be able to see this
model GetInTouch {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phoneNo   String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// below we create a model for vacancy adverts
// this advert should be created by schools only
// only registered teachers are allowed to apply for the vacancy
// there will be a one to many relation between the vancancy advert and vacancy teachers
model Vacancy {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  level          Grade
  location       String
  role           RoleType
  description    String
  responsibility String[]
  qualifications String[]
  minSalary      String
  maxSalary      String
  jobTitle       String
  state          String
  note           String
  // one to many relationship between school and vacancy
  // school can have many vacancy, vacancy can have only one school
  school         School           @relation(fields: [schoolId], references: [id])
  schoolId       String           @db.ObjectId
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  VacancyTeacher VacancyTeacher[]
}

// creating a model that will link teacher and the vancancy advert model
// a teacher can have many teacher advert
// while an advert can also have one to many relationships witht the vancancy teacher model
model VacancyTeacher {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  teacher   Teacher       @relation(fields: [teacherId], references: [id])
  teacherId String        @db.ObjectId
  vacancy   Vacancy       @relation(fields: [vacancyId], references: [id])
  vacancyId String        @db.ObjectId
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  status    VacancyStatus @default(PENDING)

  @@index([teacherId, vacancyId], name: "vacancy_teacher")
}

// this is the model that creates a connection between teachers and school they are working with
// this can help us to be able to use pending, active and rejected status
model SchoolTeacher {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  school    School         @relation(fields: [schoolId], references: [id])
  schoolId  String         @db.ObjectId
  teacher   Teacher        @relation(fields: [teacherId], references: [id])
  teacherId String         @db.ObjectId
  status    ContractStatus @default(PENDING)
  grades    Grade[]        @default([])
  subjects  Subjects[]     @default([])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())

  @@index([schoolId, teacherId], name: "school_teacher_id")
}

// here we also create a model for school students
// this will contain the id of students and school for query reasons
model SchoolStudent {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  student   Student        @relation(fields: [studentId], references: [id])
  studentId String         @db.ObjectId
  school    School         @relation(fields: [schoolId], references: [id])
  schoolId  String         @db.ObjectId
  status    ContractStatus @default(PENDING)
  classes   String[]       @default([])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())

  @@index([studentId, schoolId], name: "school_student_id")
}

// this is the model for school classes
model SchoolClass {
  id                        String                      @id @default(auto()) @map("_id") @db.ObjectId
  grade                     Grade
  name                      String
  subject                   Subjects
  time                      String
  school                    School                      @relation(fields: [schoolId], references: [id])
  schoolId                  String                      @db.ObjectId
  SchoolClassTeacher        SchoolClassTeacher[]
  SchoolClassStudent        SchoolClassStudent[]
  AnnouncementBySchoolClass AnnouncementBySchoolClass[]
  SchoolClassExam           SchoolClassExam[]
  // this will contain the arrays of the resources the teacher ass
  resourcesIds              String[]                    @default([])
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now())

  @@index([schoolId], name: "school_class")
}

model AnnouncementBySchoolClass {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  desc          String
  schoolClass   SchoolClass @relation(fields: [schoolClassId], references: [id])
  schoolClassId String      @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model AnnouncementByTeacherClass {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String
  class     Classes  @relation(fields: [classesId], references: [id])
  classesId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// creating a model for school class teachers
// this will serve as a relationship model between the school class and the teachers working in the class
model SchoolClassTeacher {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  class         SchoolClass @relation(fields: [schoolClassId], references: [id])
  schoolClassId String      @db.ObjectId
  teacher       Teacher     @relation(fields: [teacherId], references: [id])
  teacherId     String      @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  @@index([schoolClassId, teacherId], name: "school_class_teacher")
}

// creating a model for school class and student
// this will be a relationship model between the school class and students
model SchoolClassStudent {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  class         SchoolClass @relation(fields: [schoolClassId], references: [id])
  schoolClassId String      @db.ObjectId
  student       Student     @relation(fields: [studentId], references: [id])
  studentId     String      @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  @@index([schoolClassId, studentId], name: "school_class_student_id")
}

// this model depict the exams that is set by teacher
// there is one to many relationship between the teacher and the exams
model Exams {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  type      ExamType
  teacher   Teacher         @relation(fields: [teacherId], references: [id])
  teacherId String          @db.ObjectId
  test      ExamQuestions[]
  duration  String
  grade     Grade
  subject   Subjects
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  @@index([teacherId], name: "teacher_exams")
}

// the model below shows the student exams
// this is the model created and linked to appliedSection
// that is there will be one to many relationship between the student exam and that oneoneoneSection
model StudentExam {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  completed        Boolean         @default(false)
  score            Int?
  percentage       String?
  questions        ExamQuestions[]
  title            String
  grade            Grade
  // for one to many relationship between this model and appliedSection
  section          AppliedSection  @relation(fields: [appliedSectionId], references: [id])
  appliedSectionId String          @db.ObjectId
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())

  @@index([appliedSectionId, completed], name: "section_exam_for_students")
}

// this model is model for classes examms
// here this exams are not answered yet and its formed immediately the teacher links his exam to the class
// there will be a one to many relationship betweeen this model and the class medels

model ClassExams {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  class              Classes         @relation(fields: [classesId], references: [id])
  classesId          String          @db.ObjectId
  // this array contains the id of student in this class that have aswered this particular exam
  answeredStudentIds String[]        @db.ObjectId
  test               ExamQuestions[]
  duration           String
  grade              Grade
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now())

  @@index([classesId], name: "class_exam")
}

// below is the model that link schoolclass 
// and the exam being set by teachers
model SchoolClassExam {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  schoolClass        SchoolClass     @relation(fields: [schoolClassId], references: [id])
  schoolClassId      String          @db.ObjectId
  // this array contains the id of student in this class that have aswered this particular exam
  answeredStudentIds String[]        @db.ObjectId
  test               ExamQuestions[]
  duration           String
  grade              Grade
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now())

  @@index([schoolClassId], name: "class_exam")
}

model StudentClassExam {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  completed  Boolean         @default(false)
  score      Int?
  percentage String?
  questions  ExamQuestions[]
  title      String
  grade      Grade
  // the id of the student that have answered there questions
  studentId  String          @db.ObjectId
  mainExamId String          @db.ObjectId
  // this model is formed when a student answers a question from the classroom
  // there will be a one to many relation between the classroom and this model
  class      Classes         @relation(fields: [classesId], references: [id])
  classesId  String          @db.ObjectId
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now())

  @@index([classesId, studentId, mainExamId], name: "studentclassExam_classrooms")
}

// this is enum for grades
// TODO: check how many grade system we have
enum Grade {
  Grade1
  Grade2
  Grade3
  Grade4
  Grade5
  Grade6
  Grade7
  Grade8
  Grade9
  Grade10
  Grade11
  Grade12
}

// enum for contract status
enum ContractStatus {
  PENDING
  ACTIVE
  REJECTED
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

// below is the enum for teachers role
enum TeachersRole {
  INTERNAL
  EXTERNAL
}

// below is the enum for the subjects the app offers
enum Subjects {
  CHEMISTRY
  PHYSICS
  BIOLOGY
  GOVERNMENT
  ENGLISH
  LITERATURE
  CRS
  MATHEMATICS
}

// creating enums for the days of the week
enum ClassDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Role {
  Teacher
  Student
  Parents
  School
  Admin
}

enum Gender {
  Male
  Female
}

// this is for vacancy status when a teacher applied
enum VacancyStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum RoleType {
  FULLTIME @map("Full-Time")
  PARTTIME @map("Part-Time")
}

enum PreferSection {
  homeWorkSupport @map("home work support")
  oneOnOneSection @map("1 on 1 section")
  groupWork       @map("group work")
  openToJobs      @map("open to jobs")
}

// here, we create a composite type that will contain the exams
type ExamQuestions {
  question      String
  answer        String
  studentAnswer String?
  options       String[]
}

enum ExamType {
  MANUAL
  AUTO
}

enum ResourceType {
  LINK
  DOCS
}
